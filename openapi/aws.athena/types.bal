// Copyright (c) 2022 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

public type CreateWorkGroupInput record {
    # The workgroup name.
    string? Name;
    # The configuration of the workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether workgroup settings override query settings, and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>. 
    WorkGroupConfiguration? Configuration?;
    # The workgroup description.
    string? Description?;
    # A list of comma separated tags to add to the workgroup that is created.
    Tag[]? Tags?;
};

public type TagResourceInput record {
    # Specifies the ARN of the Athena resource (workgroup or data catalog) to which tags are to be added.
    string? ResourceARN;
    # A collection of one or more tags, separated by commas, to be added to an Athena workgroup or data catalog resource.
    Tag[]? Tags;
};

public type GetQueryResultsOutput record {
    # The number of rows inserted with a <code>CREATE TABLE AS SELECT</code> statement. 
    int? UpdateCount?;
    # The metadata and rows that comprise a query result set. The metadata describes the column structure and data types. To return a <code>ResultSet</code> object, use <a>GetQueryResults</a>.
    ResultSet? ResultSet?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
};

# Information about the columns in a query execution result.
public type ColumnInfo record {
    # The catalog to which the query results belong.
    string? CatalogName?;
    # The schema name (database name) to which the query results belong.
    string? SchemaName?;
    # The table name for the query results.
    string? TableName?;
    # The name of the column.
    string? Name;
    # A column label.
    string? Label?;
    # The data type of the column.
    string? Type;
    # For <code>DECIMAL</code> data types, specifies the total number of digits, up to 38. For performance reasons, we recommend up to 18 digits.
    int? Precision?;
    # For <code>DECIMAL</code> data types, specifies the total number of digits in the fractional part of the value. Defaults to 0.
    int? Scale?;
    # Indicates the column's nullable status.
    string? Nullable?;
    # Indicates whether values in the column are case-sensitive.
    boolean? CaseSensitive?;
};

public type MetadataException anydata?;

public type StartQueryExecutionOutput record {
    # The unique ID of the query that ran as a result of this request.
    string? QueryExecutionId?;
};

public type CreateNamedQueryOutput record {
    # The unique ID of the query.
    string? NamedQueryId?;
};

public type GetQueryExecutionInput record {
    # The unique ID of the query execution.
    string? QueryExecutionId;
};

# Contains metadata information for a database in a data catalog.
public type Database record {
    # The name of the database.
    string? Name;
    # An optional description of the database.
    string? Description?;
    # A set of custom key/value pairs.
    ParametersMap? Parameters?;
};

# The metadata and rows that comprise a query result set. The metadata describes the column structure and data types. To return a <code>ResultSet</code> object, use <a>GetQueryResults</a>.
public type ResultSet record {
    # The rows in the table.
    Row[]? Rows?;
    # The metadata that describes the column structure and data types of a table of query results. To return a <code>ResultSetMetadata</code> object, use <a>GetQueryResults</a>.
    ResultSetMetadata? ResultSetMetadata?;
};

public type InvalidRequestException anydata?;

public type GetNamedQueryOutput record {
    # A query, where <code>QueryString</code> is the list of SQL query statements that comprise the query.
    NamedQuery? NamedQuery?;
};

public type ListEngineVersionsInput record {
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
    # The maximum number of engine versions to return in this request.
    int? MaxResults?;
};

public type StartQueryExecutionInput record {
    # The SQL query statements to be executed.
    string? QueryString;
    # <p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>StartQueryExecution</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
    string? ClientRequestToken?;
    # The database and data catalog context in which the query execution occurs.
    QueryExecutionContext? QueryExecutionContext?;
    # The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
    ResultConfiguration? ResultConfiguration?;
    # The name of the workgroup in which the query is being started.
    string? WorkGroup?;
};

public type ListEngineVersionsOutput record {
    # A list of engine versions that are available to choose from.
    EngineVersion[10]? EngineVersions?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
};

# Contains metadata for a table.
public type TableMetadata record {
    # The name of the table.
    string? Name;
    # The time that the table was created.
    string? CreateTime?;
    # The last time the table was accessed.
    string? LastAccessTime?;
    # The type of table. In Athena, only <code>EXTERNAL_TABLE</code> is supported.
    string? TableType?;
    # A list of the columns in the table.
    Column[]? Columns?;
    # A list of the partition keys in the table.
    Column[]? PartitionKeys?;
    # A set of custom key/value pairs.
    ParametersMap? Parameters?;
};

# Describes a query execution that failed to process.
public type UnprocessedQueryExecutionId record {
    # The unique identifier of the query execution.
    string? QueryExecutionId?;
    # The error code returned when the query execution failed to process, if applicable.
    string? ErrorCode?;
    # The error message returned when the query execution failed to process, if applicable.
    string? ErrorMessage?;
};

# The Athena engine version for running queries.
public type EngineVersion record {
    # The engine version requested by the user. Possible values are determined by the output of <code>ListEngineVersions</code>, including Auto. The default is Auto.
    string? SelectedEngineVersion?;
    # Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a <code>CreateWorkGroup</code> or <code>UpdateWorkGroup</code> operation, the <code>EffectiveEngineVersion</code> field is ignored.
    string? EffectiveEngineVersion?;
};

public type ListDataCatalogsInput record {
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    string? NextToken?;
    # Specifies the maximum number of data catalogs to return.
    int? MaxResults?;
};

public type UpdatePreparedStatementOutput record {
};

public type GetTableMetadataInput record {
    # The name of the data catalog that contains the database and table metadata to return.
    string? CatalogName;
    # The name of the database that contains the table metadata to return.
    string? DatabaseName;
    # The name of the table for which metadata is returned.
    string? TableName;
};

public type UntagResourceInput record {
    # Specifies the ARN of the resource from which tags are to be removed.
    string? ResourceARN;
    # A comma-separated list of one or more tag keys whose tags are to be removed from the specified resource.
    string[]? TagKeys;
};

public type ListTableMetadataOutput record {
    # A list of table metadata.
    TableMetadata[]? TableMetadataList?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    string? NextToken?;
};

public type GetPreparedStatementInput record {
    # The name of the prepared statement to retrieve.
    string? StatementName;
    # The workgroup to which the statement to be retrieved belongs.
    string? WorkGroup;
};

# The completion date, current state, submission time, and state change reason (if applicable) for the query execution.
public type QueryExecutionStatus record {
    # <p>The state of query execution. <code>QUEUED</code> indicates that the query has been submitted to the service, and Athena will execute the query as soon as resources are available. <code>RUNNING</code> indicates that the query is in execution phase. <code>SUCCEEDED</code> indicates that the query completed without errors. <code>FAILED</code> indicates that the query experienced an error and did not complete processing. <code>CANCELLED</code> indicates that a user input interrupted query execution.</p> <note> <p>Athena automatically retries your queries in cases of certain transient errors. As a result, you may see the query state transition from <code>RUNNING</code> or <code>FAILED</code> to <code>QUEUED</code>. </p> </note>
    string? State?;
    # Further detail about the status of the query.
    string? StateChangeReason?;
    # The date and time that the query was submitted.
    string? SubmissionDateTime?;
    # The date and time that the query completed.
    string? CompletionDateTime?;
};

# The information about the updates in the query results, such as output location and encryption configuration for the query results.
public type ResultConfigurationUpdates record {
    # The location in Amazon S3 where your query results are stored, such as <code>s3://path/to/query/bucket/</code>. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a> If workgroup settings override client-side settings, then the query uses the location for the query results and the encryption configuration that are specified for the workgroup. The "workgroup settings override" is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
    string? OutputLocation?;
    # If set to "true", indicates that the previously-specified query results location (also known as a client-side setting) for queries in this workgroup should be ignored and set to null. If set to "false" or not set, and a value is present in the <code>OutputLocation</code> in <code>ResultConfigurationUpdates</code> (the client-side setting), the <code>OutputLocation</code> in the workgroup's <code>ResultConfiguration</code> will be updated with the new value. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
    boolean? RemoveOutputLocation?;
    # If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE-KMS</code> or <code>CSE-KMS</code>) and key information.
    EncryptionConfiguration? EncryptionConfiguration?;
    # If set to "true", indicates that the previously-specified encryption configuration (also known as the client-side setting) for queries in this workgroup should be ignored and set to null. If set to "false" or not set, and a value is present in the <code>EncryptionConfiguration</code> in <code>ResultConfigurationUpdates</code> (the client-side setting), the <code>EncryptionConfiguration</code> in the workgroup's <code>ResultConfiguration</code> will be updated with the new value. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
    boolean? RemoveEncryptionConfiguration?;
};

# The configuration of the workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether workgroup settings override query settings, and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>. 
public type WorkGroupConfiguration record {
    # The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
    ResultConfiguration? ResultConfiguration?;
    # If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
    boolean? EnforceWorkGroupConfiguration?;
    # Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.
    boolean? PublishCloudWatchMetricsEnabled?;
    # The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.
    boolean? BytesScannedCutoffPerQuery?;
    # If set to <code>true</code>, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
    boolean? RequesterPaysEnabled?;
    # The Athena engine version for running queries.
    EngineVersion? EngineVersion?;
};

public type CreateDataCatalogOutput record {
};

public type ListTagsForResourceInput record {
    # Lists the tags for the resource with the specified ARN.
    string? ResourceARN;
    # The token for the next set of results, or null if there are no additional results for this request, where the request lists the tags for the resource with the specified ARN.
    string? NextToken?;
    # The maximum number of results to be returned per request that lists the tags for the resource.
    int? MaxResults?;
};

# The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
public type ResultConfiguration record {
    # The location in Amazon S3 where your query results are stored, such as <code>s3://path/to/query/bucket/</code>. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using <a>WorkGroupConfiguration</a>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query Results</a>. If workgroup settings override client-side settings, then the query uses the settings specified for the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
    string? OutputLocation?;
    # If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE-KMS</code> or <code>CSE-KMS</code>) and key information.
    EncryptionConfiguration? EncryptionConfiguration?;
};

# The database and data catalog context in which the query execution occurs.
public type QueryExecutionContext record {
    # The name of the database used in the query execution. The database must exist in the catalog.
    string? Database?;
    # The name of the data catalog used in the query execution.
    string? Catalog?;
};

# The summary information for the data catalog, which includes its name and type.
public type DataCatalogSummary record {
    # The name of the data catalog.
    string? CatalogName?;
    # The data catalog type.
    string? Type?;
};

public type DeleteDataCatalogInput record {
    # The name of the data catalog to delete.
    string? Name;
};

public type UpdateWorkGroupOutput record {
};

public type ListPreparedStatementsOutput record {
    # The list of prepared statements for the workgroup.
    PreparedStatementSummary[50]? PreparedStatements?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
};

public type ListQueryExecutionsOutput record {
    # The unique IDs of each query execution as an array of strings.
    string[50]? QueryExecutionIds?;
    # A token to be used by the next request if this request is truncated.
    string? NextToken?;
};

# Information about a single instance of a query execution.
public type QueryExecution record {
    # The unique identifier for each query execution.
    string? QueryExecutionId?;
    # The SQL query statements which the query execution ran.
    string? Query?;
    # The type of query statement that was run. <code>DDL</code> indicates DDL query statements. <code>DML</code> indicates DML (Data Manipulation Language) query statements, such as <code>CREATE TABLE AS SELECT</code>. <code>UTILITY</code> indicates query statements other than DDL and DML, such as <code>SHOW CREATE TABLE</code>, or <code>DESCRIBE TABLE</code>.
    string? StatementType?;
    # The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
    ResultConfiguration? ResultConfiguration?;
    # The database and data catalog context in which the query execution occurs.
    QueryExecutionContext? QueryExecutionContext?;
    # The completion date, current state, submission time, and state change reason (if applicable) for the query execution.
    QueryExecutionStatus? Status?;
    # The amount of data scanned during the query execution and the amount of time that it took to execute, and the type of statement that was run.
    QueryExecutionStatistics? Statistics?;
    # The name of the workgroup in which the query ran.
    string? WorkGroup?;
    # The Athena engine version for running queries.
    EngineVersion? EngineVersion?;
};

public type GetWorkGroupInput record {
    # The name of the workgroup.
    string? WorkGroup;
};

public type ListTagsForResourceOutput record {
    # The list of tags associated with the specified resource.
    Tag[]? Tags?;
    # A token to be used by the next request if this request is truncated.
    string? NextToken?;
};

public type UpdateDataCatalogOutput record {
};

# The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified.
public type WorkGroupConfigurationUpdates record {
    # If set to "true", the settings for the workgroup override client-side settings. If set to "false" client-side settings are used. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html">Workgroup Settings Override Client-Side Settings</a>.
    boolean? EnforceWorkGroupConfiguration?;
    # The information about the updates in the query results, such as output location and encryption configuration for the query results.
    ResultConfigurationUpdates? ResultConfigurationUpdates?;
    # Indicates whether this workgroup enables publishing metrics to Amazon CloudWatch.
    boolean? PublishCloudWatchMetricsEnabled?;
    # The upper limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.
    boolean? BytesScannedCutoffPerQuery?;
    # Indicates that the data usage control limit per query is removed. <a>WorkGroupConfiguration$BytesScannedCutoffPerQuery</a> 
    boolean? RemoveBytesScannedCutoffPerQuery?;
    # If set to <code>true</code>, allows members assigned to a workgroup to specify Amazon S3 Requester Pays buckets in queries. If set to <code>false</code>, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is <code>false</code>. For more information about Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
    boolean? RequesterPaysEnabled?;
    # The Athena engine version for running queries.
    EngineVersion? EngineVersion?;
};

# If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE-KMS</code> or <code>CSE-KMS</code>) and key information.
public type EncryptionConfiguration record {
    # <p>Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (<code>SSE-S3</code>), server-side encryption with KMS-managed keys (<code>SSE-KMS</code>), or client-side encryption with KMS-managed keys (CSE-KMS) is used.</p> <p>If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup. </p>
    string? EncryptionOption;
    # For <code>SSE-KMS</code> and <code>CSE-KMS</code>, this is the KMS key ARN or ID.
    string? KmsKey?;
};

public type InternalServerException anydata?;

public type UpdateDataCatalogInput record {
    # The name of the data catalog to update. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
    string? Name;
    # Specifies the type of data catalog to update. Specify <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog.
    string? Type;
    # New or modified text that describes the data catalog.
    string? Description?;
    # A set of custom key/value pairs.
    ParametersMap? Parameters?;
};

# The name and last modified time of the prepared statement.
public type PreparedStatementSummary record {
    # The name of the prepared statement.
    string? StatementName?;
    # The last modified time of the prepared statement.
    string? LastModifiedTime?;
};

public type ListDataCatalogsOutput record {
    # A summary list of data catalogs.
    DataCatalogSummary[]? DataCatalogsSummary?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    string? NextToken?;
};

public type ListDatabasesOutput record {
    # A list of databases from a data catalog.
    Database[]? DatabaseList?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    string? NextToken?;
};

public type GetDatabaseOutput record {
    # Contains metadata information for a database in a data catalog.
    Database? Database?;
};

public type ListNamedQueriesOutput record {
    # The list of unique query IDs.
    string[50]? NamedQueryIds?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
};

# A query, where <code>QueryString</code> is the list of SQL query statements that comprise the query.
public type NamedQuery record {
    # The query name.
    string? Name;
    # The query description.
    string? Description?;
    # The database to which the query belongs.
    string? Database;
    # The SQL query statements that comprise the query.
    string? QueryString;
    # The unique identifier of the query.
    string? NamedQueryId?;
    # The name of the workgroup that contains the named query.
    string? WorkGroup?;
};

# A label that you assign to a resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter workgroups or data catalogs in your account. For best practices, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas. 
public type Tag record {
    # A tag key. The tag key length is from 1 to 128 Unicode characters in UTF-8. You can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys are case-sensitive and must be unique per resource. 
    string? Key?;
    # A tag value. The tag value length is from 0 to 256 Unicode characters in UTF-8. You can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag values are case-sensitive. 
    string? Value?;
};

public type DeleteWorkGroupInput record {
    # The unique name of the workgroup to delete.
    string? WorkGroup;
    # The option to delete the workgroup and its contents even if the workgroup contains any named queries or query executions.
    boolean? RecursiveDeleteOption?;
};

public type StopQueryExecutionInput record {
    # The unique ID of the query execution to stop.
    string? QueryExecutionId;
};

# The summary information for the workgroup, which includes its name, state, description, and the date and time it was created.
public type WorkGroupSummary record {
    # The name of the workgroup.
    string? Name?;
    # The state of the workgroup.
    string? State?;
    # The workgroup description.
    string? Description?;
    # The workgroup creation date and time.
    string? CreationTime?;
    # The Athena engine version for running queries.
    EngineVersion? EngineVersion?;
};

public type ListTableMetadataInput record {
    # The name of the data catalog for which table metadata should be returned.
    string? CatalogName;
    # The name of the database for which table metadata should be returned.
    string? DatabaseName;
    # A regex filter that pattern-matches table names. If no expression is supplied, metadata for all tables are listed.
    string? Expression?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the NextToken from the response object of the previous page call.
    string? NextToken?;
    # Specifies the maximum number of results to return.
    int? MaxResults?;
};

public type CreateWorkGroupOutput record {
};

public type ListPreparedStatementsInput record {
    # The workgroup to list the prepared statements for.
    string? WorkGroup;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
    # The maximum number of results to return in this request.
    int? MaxResults?;
};

public type ListDatabasesInput record {
    # The name of the data catalog that contains the databases to return.
    string? CatalogName;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
    # Specifies the maximum number of results to return.
    int? MaxResults?;
};

public type UpdatePreparedStatementInput record {
    # The name of the prepared statement.
    string? StatementName;
    # The workgroup for the prepared statement.
    string? WorkGroup;
    # The query string for the prepared statement.
    string? QueryStatement;
    # The description of the prepared statement.
    string? Description?;
};

public type GetTableMetadataOutput record {
    # Contains metadata for a table.
    TableMetadata? TableMetadata?;
};

# Information about a named query ID that could not be processed.
public type UnprocessedNamedQueryId record {
    # The unique identifier of the named query.
    string? NamedQueryId?;
    # The error code returned when the processing request for the named query failed, if applicable.
    string? ErrorCode?;
    # The error message returned when the processing request for the named query failed, if applicable.
    string? ErrorMessage?;
};

public type ResourceNotFoundException anydata?;

public type BatchGetQueryExecutionOutput record {
    # Information about a query execution.
    QueryExecution[]? QueryExecutions?;
    # Information about the query executions that failed to run.
    UnprocessedQueryExecutionId[]? UnprocessedQueryExecutionIds?;
};

public type DeletePreparedStatementInput record {
    # The name of the prepared statement to delete.
    string? StatementName;
    # The workgroup to which the statement to be deleted belongs.
    string? WorkGroup;
};

public type DeletePreparedStatementOutput record {
};

# A piece of data (a field in the table).
public type Datum record {
    # The value of the datum.
    string? VarCharValue?;
};

public type CreatePreparedStatementInput record {
    # The name of the prepared statement.
    string? StatementName;
    # The name of the workgroup to which the prepared statement belongs.
    string? WorkGroup;
    # The query string for the prepared statement.
    string? QueryStatement;
    # The description of the prepared statement.
    string? Description?;
};

public type GetDataCatalogInput record {
    # The name of the data catalog to return.
    string? Name;
};

public type BatchGetQueryExecutionInput record {
    # An array of query execution IDs.
    string[50]? QueryExecutionIds;
};

public type DeleteNamedQueryInput record {
    # The unique ID of the query to delete.
    string? NamedQueryId;
};

public type BatchGetNamedQueryInput record {
    # An array of query IDs.
    string[50]? NamedQueryIds;
};

public type GetPreparedStatementOutput record {
    # A prepared SQL statement for use with Athena.
    PreparedStatement? PreparedStatement?;
};

public type TagResourceOutput record {
};

public type UntagResourceOutput record {
};

public type GetWorkGroupOutput record {
    # A workgroup, which contains a name, description, creation time, state, and other configuration, listed under <a>WorkGroup$Configuration</a>. Each workgroup enables you to isolate queries for you or your group of users from other queries in the same account, to configure the query results location and the encryption configuration (known as workgroup settings), to enable sending query metrics to Amazon CloudWatch, and to establish per-query data usage control limits for all queries in a workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
    WorkGroup? WorkGroup?;
};

# The rows that comprise a query result table.
public type Row record {
    # The data that populates a row in a query result table.
    Datum[]? Data?;
};

public type GetQueryExecutionOutput record {
    # Information about a single instance of a query execution.
    QueryExecution? QueryExecution?;
};

public type GetQueryResultsInput record {
    # The unique ID of the query execution.
    string? QueryExecutionId;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
    # The maximum number of results (rows) to return in this request.
    int? MaxResults?;
};

public type ListWorkGroupsOutput record {
    # A list of <a>WorkGroupSummary</a> objects that include the names, descriptions, creation times, and states for each workgroup.
    WorkGroupSummary[50]? WorkGroups?;
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
};

public type DeleteNamedQueryOutput record {
};

public type CreatePreparedStatementOutput record {
};

# Contains information about a data catalog in an Amazon Web Services account.
public type DataCatalog record {
    # The name of the data catalog. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
    string? Name;
    # An optional description of the data catalog.
    string? Description?;
    # The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog.
    string? Type;
    # A set of custom key/value pairs.
    ParametersMap? Parameters?;
};

# A workgroup, which contains a name, description, creation time, state, and other configuration, listed under <a>WorkGroup$Configuration</a>. Each workgroup enables you to isolate queries for you or your group of users from other queries in the same account, to configure the query results location and the encryption configuration (known as workgroup settings), to enable sending query metrics to Amazon CloudWatch, and to establish per-query data usage control limits for all queries in a workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
public type WorkGroup record {
    # The workgroup name.
    string? Name;
    # The state of the workgroup: ENABLED or DISABLED.
    string? State?;
    # The configuration of the workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether workgroup settings override query settings, and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>. 
    WorkGroupConfiguration? Configuration?;
    # The workgroup description.
    string? Description?;
    # The date and time the workgroup was created.
    string? CreationTime?;
};

# The amount of data scanned during the query execution and the amount of time that it took to execute, and the type of statement that was run.
public type QueryExecutionStatistics record {
    # The number of milliseconds that the query took to execute.
    int? EngineExecutionTimeInMillis?;
    # The number of bytes in the data that was queried.
    int? DataScannedInBytes?;
    # The location and file name of a data manifest file. The manifest file is saved to the Athena query results location in Amazon S3. The manifest file tracks files that the query wrote to Amazon S3. If the query fails, the manifest file also tracks files that the query intended to write. The manifest is useful for identifying orphaned files resulting from a failed query. For more information, see <a href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Working with Query Results, Output Files, and Query History</a> in the <i>Amazon Athena User Guide</i>.
    string? DataManifestLocation?;
    # The number of milliseconds that Athena took to run the query.
    int? TotalExecutionTimeInMillis?;
    # The number of milliseconds that the query was in your query queue waiting for resources. Note that if transient errors occur, Athena might automatically add the query back to the queue.
    int? QueryQueueTimeInMillis?;
    # The number of milliseconds that Athena took to plan the query processing flow. This includes the time spent retrieving table partitions from the data source. Note that because the query engine performs the query planning, query planning time is a subset of engine processing time.
    int? QueryPlanningTimeInMillis?;
    # The number of milliseconds that Athena took to finalize and publish the query results after the query engine finished running the query.
    int? ServiceProcessingTimeInMillis?;
};

# Contains metadata for a column in a table.
public type Column record {
    # The name of the column.
    string? Name;
    # The data type of the column.
    string? Type?;
    # Optional information about the column.
    string? Comment?;
};

public type GetNamedQueryInput record {
    # The unique ID of the query. Use <a>ListNamedQueries</a> to get query IDs.
    string? NamedQueryId;
};

public type ListNamedQueriesInput record {
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
    # The maximum number of queries to return in this request.
    int? MaxResults?;
    # The name of the workgroup from which the named queries are being returned. If a workgroup is not specified, the saved queries for the primary workgroup are returned.
    string? WorkGroup?;
};

public type BatchGetNamedQueryOutput record {
    # Information about the named query IDs submitted.
    NamedQuery[]? NamedQueries?;
    # Information about provided query IDs.
    UnprocessedNamedQueryId[]? UnprocessedNamedQueryIds?;
};

public type CreateDataCatalogInput record {
    # The name of the data catalog to create. The catalog name must be unique for the Amazon Web Services account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
    string? Name;
    # The type of data catalog to create: <code>LAMBDA</code> for a federated catalog, <code>HIVE</code> for an external hive metastore, or <code>GLUE</code> for an Glue Data Catalog.
    string? Type;
    # A description of the data catalog to be created.
    string? Description?;
    # A set of custom key/value pairs.
    ParametersMap? Parameters?;
    # A list of comma separated tags to add to the data catalog that is created.
    Tag[]? Tags?;
};

public type GetDatabaseInput record {
    # The name of the data catalog that contains the database to return.
    string? CatalogName;
    # The name of the database to return.
    string? DatabaseName;
};

# The metadata that describes the column structure and data types of a table of query results. To return a <code>ResultSetMetadata</code> object, use <a>GetQueryResults</a>.
public type ResultSetMetadata record {
    # Information about the columns returned in a query result metadata.
    ColumnInfo[]? ColumnInfo?;
};

public type ListWorkGroupsInput record {
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
    # The maximum number of workgroups to return in this request.
    int? MaxResults?;
};

# A prepared SQL statement for use with Athena.
public type PreparedStatement record {
    # The name of the prepared statement.
    string? StatementName?;
    # The query string for the prepared statement.
    string? QueryStatement?;
    # The name of the workgroup to which the prepared statement belongs.
    string? WorkGroupName?;
    # The description of the prepared statement.
    string? Description?;
    # The last modified time of the prepared statement.
    string? LastModifiedTime?;
};

public type GetDataCatalogOutput record {
    # Contains information about a data catalog in an Amazon Web Services account.
    DataCatalog? DataCatalog?;
};

public type ListQueryExecutionsInput record {
    # A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.
    string? NextToken?;
    # The maximum number of query executions to return in this request.
    int? MaxResults?;
    # The name of the workgroup from which queries are being returned. If a workgroup is not specified, a list of available query execution IDs for the queries in the primary workgroup is returned.
    string? WorkGroup?;
};

public type StopQueryExecutionOutput record {
};

public type DeleteWorkGroupOutput record {
};

public type DeleteDataCatalogOutput record {
};

public type TooManyRequestsException anydata?;

public type UpdateWorkGroupInput record {
    # The specified workgroup that will be updated.
    string? WorkGroup;
    # The workgroup description.
    string? Description?;
    # The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified.
    WorkGroupConfigurationUpdates? ConfigurationUpdates?;
    # The workgroup state that will be updated for the given workgroup.
    string? State?;
};

public type CreateNamedQueryInput record {
    # The query name.
    string? Name;
    # The query description.
    string? Description?;
    # The database to which the query belongs.
    string? Database;
    # The contents of the query with all query statements.
    string? QueryString;
    # <p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>CreateNamedQuery</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>
    string? ClientRequestToken?;
    # The name of the workgroup in which the named query is being created.
    string? WorkGroup?;
};

# A set of custom key/value pairs.
public type ParametersMap record {
};
