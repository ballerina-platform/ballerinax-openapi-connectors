import org.ballerinax.openapi.validator.Utils

buildscript {
    dependencies {
        classpath files("libs/ballerinax-openapi-validator-1.0-SNAPSHOT-all.jar")
    }
}

plugins {
    id 'java'
    id "com.github.spotbugs" version "${githubSpotbugsVersion}"
    id "com.github.johnrengelman.shadow" version "${githubJohnrengelmanShadowVersion}"
    id "de.undercouch.download" version "${underCouchDownloadVersion}"
    id "net.researchgate.release" version "${researchgateReleaseVersion}"
}

apply plugin: 'jacoco'
apply plugin: 'maven-publish'

def ballerinaDistributionPath = System.getenv("BALLERINA_HOME")
List<String> ballerinaPackages = new ArrayList<>();
List<String> updatedBallerinaPackages = new ArrayList<>();
boolean release = false;
boolean remote = false;
boolean isPublishing = false;
if (project.hasProperty("remote")){
    remote = new Boolean(project.property("remote").toString())
}
if (project.hasProperty("release")){
    release = new Boolean(project.property("release").toString())
}
if (project.hasProperty("publishing")){
    isPublishing = new Boolean(project.property("publishing").toString())
}

Utils.loadOpenAPIProperties(project.projectDir.absolutePath)
String openApiPackageDirPath = project.projectDir.absolutePath + "/openapi";
updatedBallerinaPackages = Utils.findUpdatedBallerinaPackages(openApiPackageDirPath);
ballerinaPackages = Utils.findBallerinaPackages(openApiPackageDirPath);
if (isPublishing){
    updatedBallerinaPackages = ballerinaPackages;
}

task codeBuild {
    println "Task: Building connectors..."
    for (String path : updatedBallerinaPackages) {
        Utils.executePrechecks(path);
        exec {
            commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal pack ${path}"
        }
    }

    if (!release) {
        println "Task: Pushing connectors to local..."
        for (String path : updatedBallerinaPackages) {
            try {
                exec {
                    workingDir "${path}"
                    commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal push --repository=local"
                }
            }
            catch (Exception ex) {
                println "Failed to push connector [" + path + "] to local repository. Error : " + ex.toString(); 
            }
        }
    }
}

task releaseConnector {
    if(release){
        println "Task: Pushing connectors to Ballerina Central..."
        for (String path : updatedBallerinaPackages) {          
            try {
                exec {
                    println "Pushing connector [" + path + "] to Ballerina Central"
                    workingDir "${path}"
                    commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal push"
                }
            } catch (Exception ex) {
                println "Failed to push connector [" + path + "] to Ballerina Central. Error : " + ex.toString(); 
            }
            try {
                Utils.bumpBallerinaTomlVersion(path);
            } catch (Exception ex) {
                println "Failed to bump version of connector [" + path + "] to next. Error : " + ex.toString();
            }
            println "---------------------------------------"
        }
        println "Task: Pushed all connectors to Ballerina Central successfully..."
        print "Task: Updating package hashes: "
        Utils.writeUpdatedFileHashes(project.projectDir.absolutePath, updatedBallerinaPackages)
        println "Success"
    }
}

// Daily build configurations

task copyDistribution {

    def packageOrg = "ballerinax"
    def platform = "java11"
    def artifactCacheParent = file("${project.projectDir}/build/cache_parent/")

    if (isPublishing) {
        for(String packagePath: ballerinaPackages) {
            def packageName = Utils.getPackageName(packagePath);
            def packageVersion = Utils.getPackageVersion(packagePath);
            mkdir "${project.projectDir}/openapi/${packageName}/target/bala"
            def pathToBala = file("${project.projectDir}/openapi/${packageName}/target/bala")

            inputs.dir file(project.projectDir)
            pathToBala.eachFileMatch(~/.*.bala/) { balaFile ->
                copy {
                    from zipTree(balaFile)
                    into file("${artifactCacheParent}/bala/${packageOrg}/${packageName}/${packageVersion}/${platform}")
                }
            }
            copy {
                from file("${packagePath}/target/cache")
                exclude '**/*-testable.jar'
                exclude '**/tests_cache/'
                into file("${artifactCacheParent}/cache/")
            }
            outputs.dir artifactCacheParent
        }
    }
}

task createArtifactZip(type: Zip) {
    if (isPublishing){
        println("Creating Zip Artifact");
        from "${buildDir}/cache_parent"
        archiveName 'distribution.zip'
        destinationDir(file("${buildDir}/distribution"))
    }    
}

publishing {
    if (isPublishing){
        println("Publishing Packages");
        publications {
            mavenJava(MavenPublication) {
                artifact source: createArtifactZip, extension: 'zip'
            }
        }

        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/ballerina-platform/ballerinax-openapi-connectors")
                credentials {
                    username = System.getenv("publishUser")
                    password = System.getenv("publishPAT")
                }
            }
        }
    }
}

publish.dependsOn copyDistribution
